##==============================================================================
##==============================================================================
## Bot 应用程序设置
##==============================================================================
##==============================================================================

# 默认的日志级别。如果不配置，则用 java 默认的（通常是 INFO 级别）
# java.util.logging.Level 支持的级别名称有：
#
#	OFF     (关闭日志，对应的数值是整数的最大值)
#	SEVERE  (严重级别，对应的数值是 1000)
#	WARNING (警告级别，对应的数值是 900)
#	INFO    (一般信息，java 默认的日志级别，对应的数值是 800)
#	CONFIG  (配置信息，对应的数值是 700)
#	FINE    (详细级别，对应的数值是 500)
#	FINER   (比较详细，作者常用此级别，对应的数值是 400)
#	FINEST  (最详细了，对应的数值是 300)
#	ALL     (所有级别，记录所有级别的日志,对应的数值是整数的最小值)
#	或者阿拉伯数字级别……
#
# 作者自己一般设置为 FINER 级别，以跟踪原始消息的收发记录
#app.log.default-level=INFO

# 是否在字符终端用文字显示二维码
# 注意：在 linux 下，不同字体显示效果可能达不到预期效果，建议终端使用“宋体”字体
app.text-QR-Code.display-in-terminal=yes

# 字符终端的背景色是否比前景色暗 (比如：黑底灰字)
# 当该选项为 true 时， ${app.text-QR-Code.use-ANSI-Escape} 强制变为 true
app.text-QR-Code.terminal.background-is-darker-than-foreground=yes

# 是否使用 ANSIEscape 把颜色输出出来： 当在 linux 下使用时，建议打开此选项
app.text-QR-Code.use-ANSI-Escape=yes

# 将微信登录二维码图片转换、缩小需要用到 ImageMagick 工具
app.external-utils.imagemagick.path=/usr/bin

# 部分音频、视频需要做转换操作，转换需要用到 ffmpeg 工具
# 对于 RedHat 系的 linux，建议下载安装 http://johnvansickle.com/ffmpeg/ 的静态编译版本，因为这个支持 amr 编码。
#   rpmfusion 仓库的 ffmpeg 不支持 amr，导致百度语音识别转码时失败： Encoder (codec amr_nb) not found for output stream #0:0
app.external-utils.ffmpeg.path=/usr/bin

# 应用程序工作目录
# 在运行时，
#   应用程序会下载图片、视频、语音等资源下载到工作目录下的 medias 下，
#   登录二维码图片下载到工作目录下的 qrcodes 目录下
# 默认为当前目录下的 "run" 目录
app.running.cache-directory=run
#app.running.cache-directory=.
#app.running.cache-directory=/var/lib/WeChatBotEngine
#app.running.cache-directory=/var/run/WeChatBotEngine

# 控制台命令前缀
app.console.command-prefix=/

# 文本消息命令前缀
# 可以把接收到文本消息当做管理命令、Bot 命令，那么命令的前缀是
app.text-message.command-prefix=/

# 偶尔情况下，访问微信 HTTP 接口时，可能会遇到类似连接超时、读取超时、SSL 握手异常等问题
# 这时候需要多试几次，具体试多少次，用此参数指定，但取决于代码的实现，有的地方可能未顾及到这个问题。
app.net.try-times=3


#-------------------------------------------------------------------------------
# 翻墙代理服务器
#-------------------------------------------------------------------------------
# 翻墙代理服务器类型： http 或 socks
app.gfw.proxy.type=
# 翻墙代理服务器主机
app.gfw.proxy.host=
# 翻墙代理服务器端口
app.gfw.proxy.port=


#-------------------------------------------------------------------------------
# 数据库链接
#-------------------------------------------------------------------------------
app.jdbc.driver=com.mysql.jdbc.Driver
app.jdbc.url=jdbc:mysql://localhost/WeChatBotEngine?autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull
app.jdbc.username=root
app.jdbc.password=
# 保持连接活动的检测 SQL 语句
app.jdbc.keep-alive-sql=SELECT 1
# 检测时间间隔（单位：秒）。如果小于等于 0，则表示不设置时间间隔。
app.jdbc.keep-alive-interval=600





##==============================================================================
##==============================================================================
## Bot 引擎设置
##==============================================================================
##==============================================================================

# 要加载的 Bot 的类名（如果要加载多个 Bot，加一行类似的配置即可）
#
# 注意，当 engine.message.dispatch.thread-mode 配置不是 multithread 时，
#       要合理的安排 Bot 的顺序，以达到自己预期的效果
#

engine.bots.load.classNames=net_maclife_wechat_http_Bot_Manager
engine.bots.load.classNames=net_maclife_wechat_http_Bot_SayHi
#engine.bots.load.classNames=net_maclife_wechat_http_Bot_Repeater
engine.bots.load.classNames=net_maclife_wechat_http_Bot_Relay
#engine.bots.load.classNames=net_maclife_wechat_http_Bot_GoogleImageSearch
engine.bots.load.classNames=net_maclife_wechat_http_Bot_BaiduImageSearch
engine.bots.load.classNames=net_maclife_wechat_http_Bot_BaiduTranslate
engine.bots.load.classNames=net_maclife_wechat_http_Bot_BaiduVoice
#engine.bots.load.classNames=net_maclife_wechat_http_Bot_HCICloudCSR
#engine.bots.load.classNames=net_maclife_wechat_http_Bot_iConTek
#engine.bots.load.classNames=net_maclife_wechat_http_Bot_MissileLaunched_JustForFun
#engine.bots.load.classNames=net_maclife_wechat_http_Bot_SimpleAddressBook
#engine.bots.load.classNames=net_maclife_wechat_http_Bot_ActiveDirectoryAddressBook
engine.bots.load.classNames=net_maclife_wechat_http_Bot_ShellCommand
#engine.bots.load.classNames=net_maclife_wechat_http_Bot_Emoji
engine.bots.load.classNames=net_maclife_wechat_http_Bot_MakeFriend
#engine.bots.load.classNames=net_maclife_wechat_http_Bot_WebSoup
#engine.bots.load.classNames=net_maclife_wechat_http_Bot_XunFeiYun

# 是否将收到的文本消息中类似下一行那样的字符串还原成实际的 emoji 字符。接收到的 emoji 字符实际上是类似下一行的字符串（可能腾讯担心各平台对 unicode 支持程度不同？）
# <span class="emoji emoji1f44c"></span>
# 但有个问题，假设手机端就是输入的上面行的文字，在 HTTP 端会原样收到 -- 然后就会变还原成一个 emoji 字符…
engine.message.content.restore-emoji-character=yes

# 与上面的 engine.message.text.restore-emoji-character 参数类似，只不过，这个参数是针对名字（昵称/备注名）中的 emoji 字符处理的
engine.message.name.restore-emoji-character=yes

# 在发送文本消息时，是否附加上机器人名称
engine.message.text.append-bot-name=yes

# 在发送文本消息时，是否附加上时间戳
engine.message.text.append-timestamp=yes

# 是否忽略自己发的消息
engine.message.ignore-my-own-message=no

# 是否忽略公众号消息
# 公众号可能存在对话机器人的情况，如果不忽略，有可能造成本机器人和公众号的机器人对话死循环的情况……
engine.message.ignore-public-account=yes

# 引擎把消息分发到各 Bot 的线程模式
# 取值
# singlethread : 单线程。使用此选项，Bot 的执行将在 Bot 引擎线程内执行
# multithread : 多线程。使用此选项，Bot 的执行将在单独的线程内执行
engine.message.dispatch.thread-mode=multithread


#-------------------------------------------------------------------------------
# 如何触发机器人
# 这些配置将深度影响机器人（你）在频道里扰人程度
# 除了 engine.trigger.mode、 engine.trigger.mode.group-chat、 engine.trigger.mode.private-chat 外，其他均可以配置多项
#
# 触发模式取值：
#     none | disabled | 不配置或为空 = 不触发（相当于禁用）;
#     @meFromStart    = 必须在消息的开头提到我才可以（注意：该选项仅针对文本消息）： 就是说，必须
#     @me             = 必须在消息里提到我才可以（注意：该选项仅针对文本消息）
#     Command         = 通过 bot 命令触发
#     *               = 一开口就触发：此选项可能过于扰人
#-------------------------------------------------------------------------------
# 全局默认触发模式
engine.trigger.mode=*

# 群聊的全局默认触发模式。此选项覆盖全局默认触发模式 engine.trigger.mode
engine.trigger.mode.group-chat=*

# 私聊的全局默认触发模式。此选项覆盖全局默认触发模式 engine.trigger.mode
engine.trigger.mode.private-chat=*

#
# 针对特定群聊/聊天室的配置
#
#engine.trigger.mode.group-chat.nick-name.XXXXXXX=@meFromStart

#
# 针对特定联系人的配置
#
engine.trigger.mode.private-chat.alias.XXX=*
engine.trigger.mode.private-chat.remark-name.XXX=*
engine.trigger.mode.private-chat.nick-name.XXX=*

##==============================================================================
##==============================================================================
## 各 Bot 的设置
##==============================================================================
##==============================================================================

#-------------------------------------------------------------------------------
# Bot 管理器机器人： 将控制台里的一部分命令，用 Bot 来实现，以达到远程管理的目的
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_Manager.name=远程管理

bot.manager.command.load-bot=LoadBot
bot.manager.command.unload-bot=UnloadBot
bot.manager.command.list-bots=ListBots
bot.manager.command.log-level=LogLevel

#
# 群聊操作
#
# 邀请入群
bot.manager.command.invite=Invite
# 踢人
bot.manager.command.kick=Kick
# 改群名
bot.manager.command.topic=Topic
# 新建群（开房 \o/）
bot.manager.command.new-room=NewRoom


#-------------------------------------------------------------------------------
# 打招呼、说再见机器人
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_SayHi.name=打招呼

bot.hi.message.started=机器人已登录，人机已合体。
bot.hi.message.stopped=机器人已退出，人机已分离。
# .accounts 一般是配置明文帐号的，比如： wxid_XXX、gh_XXX、filemanager、自定义的帐号（不同于 alias，但的确是自定义的），
# 这个明文帐号，可以在手机上点开某人/某群聊天窗口时在 bot engine 这边得到
bot.hi.message.target.accounts=
bot.hi.message.target.accounts=
bot.hi.message.target.aliases=
bot.hi.message.target.aliases=
bot.hi.message.target.aliases=
bot.hi.message.target.remark-names=
bot.hi.message.target.remark-names=
bot.hi.message.target.nick-names=
bot.hi.message.target.nick-names=


#-------------------------------------------------------------------------------
# 复读机机器人
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_Repeater.name=复读机

# 是否复读自己发的消息（从其他设备上发的，比如从手机上发的，在 Web 端会收到）
bot.repeater.repeat-my-own-message=no


#-------------------------------------------------------------------------------
# 消息中继器机器人
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_Relay.name=消息中继

# 中继器 Socket 侦听的 IP 地址。
# 若要侦听所有的 IP，请改为 0.0.0.0
bot.relay.listen.address=127.0.0.1
#bot.relay.listen.address=0.0.0.0

# 中继器 Socket 侦听的端口
# 5738:5微7信3转8发
bot.relay.listen.port=5738


#-------------------------------------------------------------------------------
# WebSoup 机器人： HTML/JSON 解析器，抓取网页内容，解析 HTML 或 JSON，获取其中的文字信息。
# 支持模板功能 -- 用模板就可以简化抓取网页的命令
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_WebSoup.name=抓网页(HTML/XML/JSON)

bot.web-soup.template-shortcut-prefix=$

# web soup 命令列表
# 模板名可以直接用来当“命令”使用，当这么用是，必须带一个命令前缀
# 注意： 因为 WebSoup 命令要处理 html/xml 和 json/js 两个格式的数据，所以，要针对两个格式的数据定义两个不同的命令别名
bot.web-soup.commands.html/xml=ht
bot.web-soup.commands.json/js=json

bot.web-soup.table-name.template=ht_templates
bot.web-soup.table-name.sub-selectors=ht_templates_other_sub_selectors

# ht 命令返回的最大行数默认值
# - 如果为 0 表示不限制最大行数（注意）
# - 在执行命令时，可以用 .行数 选项来改变该数值。例如： 'cmd.10 ls /bin' 就把 ls /bin 的输出行数限定为前 10 行
bot.command-line.max-response-lines=5


#-------------------------------------------------------------------------------
# 捷通华声 灵云（私有云）智能客服机器人
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_HCICloudCSR.name=灵云智能客服

bot.hcicloud.csr.server.address=localhost
bot.hcicloud.csr.server.port=80
bot.hcicloud.csr.app.key=
bot.hcicloud.csr.robot.id=<在这里输入机器人的ID(Hash)>
bot.hcicloud.csr.robot.channel.number=<在这里输入机器人的ID(阿拉伯数字)>
bot.hcicloud.csr.robot.talker.id=WeChatBotEngine
# 固定为本接口的版本号  字段取值描述： 必须为”3.3.0”
bot.hcicloud.csr.robot.receiver.id=3.3.0
bot.hcicloud.csr.charset.encoding=utf-8


#-------------------------------------------------------------------------------
# iConTek 客服机器人
# 用 /icontek 命令与 iConTek 机器人对话
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_iConTek.name=iConTek

bot.iConTek.commands=icontek

bot.iConTek.Tandroid.server.host=localhost
bot.iConTek.Tandroid.server.port=25000
# http | https
bot.iConTek.Tandroid.server.scheme=http


#-------------------------------------------------------------------------------
# 百度云公共配置，语音识别、语音合成、图片文字识别等公用
#-------------------------------------------------------------------------------
# 百度访问令牌 (大王叫我来巡山)
# 这里用相对路径，所有的文件都放在 ${app.running.cache-directory} 目录下
bot.baidu.oauth.accessTokenFile=baidu/baidu-oauth-access-token.json

#-------------------------------------------------------------------------------
# 百度语音
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_BaiduVoice.name=百度语音

#bot.baidu.voice.app.id=
bot.baidu.voice.app.key=
bot.baidu.voice.app.password=

# 语音识别 ASR (Automatic Speech Recognition)

# 语音合成 TTS (Text To Speech)

#-------------------------------------------------------------------------------
# 百度图片文字识别 OCR (Optical Character Recognition)
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# 百度图片搜索
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_BaiduImageSearch.name=百度识图


#-------------------------------------------------------------------------------
# 百度翻译
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_BaiduTranslate.name=百度翻译

bot.baidu-translate.commands=百度翻译

bot.baidu-translate.app.id=
bot.baidu-translate.app.key=
# 语言代码取值列表参见： http://api.fanyi.baidu.com/api/trans/product/apidoc#languageList
bot.baidu-translate.from-language=auto
# 语言代码取值列表参见： http://api.fanyi.baidu.com/api/trans/product/apidoc#languageList
# 目标语言代码不能设置为 auto
bot.baidu-translate.to-language=zh


#-------------------------------------------------------------------------------
# Google 公共设置
#-------------------------------------------------------------------------------
google.useGFWProxy=yes

#-------------------------------------------------------------------------------
# Google 图片搜索
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_GoogleImageSearch.name=Google 图片搜索


#-------------------------------------------------------------------------------
# “导弹已发射”
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_MissileLaunched_JustForFun.name=恶搞地理位置信息

#
# 回复消息列表，该 Bot 将随机挑选一条发送
#
# 朝鲜
bot.missile-launched.replies=大浦洞导弹已准备就绪，请首长直(驾)驶思密达！
bot.missile-launched.replies=报告首长，大浦洞导弹已向目标发射，预计 50 分钟后到达目标，请指示思密达！
bot.missile-launched.replies=미사일 발사 목표 대포동 보고서 머리 50 분 목표에 도달 할 것으로 예상되어, 지시
# 中国
bot.missile-launched.replies=东风导弹已准备就绪，请首长直(驾)驶！
bot.missile-launched.replies=巨浪导弹已准备就绪，请首长直(驾)驶！
# 俄罗斯
bot.missile-launched.replies=飞毛腿导弹已准备就绪，请首长直(驾)驶！
bot.missile-launched.replies=Отчет направляется ракета Scud готова, проинструктировать
bot.missile-launched.replies=白杨导弹已准备就绪，请首长直(驾)驶！
# 美国
bot.missile-launched.replies=三叉戟导弹已准备就绪，请首长直(驾)驶！
bot.missile-launched.replies=Missile launched! About 10 minutes to reach the target. Orders, SIR!
# 印度
bot.missile-launched.replies=烈火导弹已准备就绪，请首长直(驾)驶！


#-------------------------------------------------------------------------------
# 简易通讯录
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_SimpleAddressBook.name=简易通讯录

bot.simple-address-book.commands=txl
bot.simple-address-book.commands=sab
bot.simple-address-book.commands=ab
bot.simple-address-book.commands=通讯录
bot.simple-address-book.commands=通信录
bot.simple-address-book.commands=通讯簿
bot.simple-address-book.commands=地址本
bot.simple-address-book.commands=地址簿
bot.simple-address-book.commands=简易通讯录
bot.simple-address-book.commands=简易通信录

bot.simple-address-book.jdbc.database-table.prefix=


#-------------------------------------------------------------------------------
# 活动目录通讯录 / 域通讯录 / Active Directory 通讯录
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_ActiveDirectoryAddressBook.name=公司通讯录

bot.active-directory-address-book.commands=adab
bot.active-directory-address-book.commands=ytxl
bot.active-directory-address-book.commands=域通讯录
bot.active-directory-address-book.commands=域通讯簿
bot.active-directory-address-book.commands=gstxl
bot.active-directory-address-book.commands=公司通讯录
bot.active-directory-address-book.commands=公司通讯簿

# 搜索 Active Directory 的 BaseDN 时，最多返回多少条匹配到的记录
bot.active-directory-address-book.max-fetched-entries=2
#bot.active-directory-address-book.max-fetched-entries=5

#---------------------------------------
# 联系人昵称与域通讯簿的关联
# * 联系人名称 就是 微信上看到的联系人名称、群名称
# * 域通讯簿名称 就是 自己定义的名称，不能包含空格' '、逗号','、分号';'、斜杠'/'。
#     每个联系人可以搜索多个域通讯簿，多个域通讯簿用空格' '、逗号','、分号';'、斜杠'/'分割开
#     然后，需要根据域通讯簿的名称，在下面定义域通讯簿
#---------------------------------------
#bot.active-directory-address-book.map.<联系人名称1>=<域通讯簿名称1>[,域通讯簿名称2]...
#bot.active-directory-address-book.map.<联系人名称2>=<域通讯簿名称1>[,域通讯簿名称2]...
#bot.active-directory-address-book.map.<联系人名称3>=<域通讯簿名称1>[,域通讯簿名称2]...

#---------------------------------------
# 域通讯簿定义
#
# 要先定义好域通讯簿，然后为某些联系人(联系人或者聊天群)[指定/关联]域通讯簿，
# 这样，这些联系人就可以使用关联的域通讯簿了。
#
# 注意，如果某个群要搜索一个 AD 域的多个 OU，只需要为该 AD 域定义一个域通讯簿，然后在该域通讯簿定义中，指定多个 base-dn 即可。
#---------------------------------------

#### 域通讯簿名称1 ####
# ldap / ldaps
bot.active-directory-address-book.域通讯簿名称1.ldap.scheme=ldap

# Active Directory 服务器 / LDAP 服务器 的主机名
bot.active-directory-address-book.域通讯簿名称1.ldap.server.address=active-directory-server-name-or-ip

# Active Directory 服务器 / LDAP 服务器 的端口
# ldap:  389 3268
# ldaps: 636 3269
bot.active-directory-address-book.域通讯簿名称1.ldap.server.port=389

# 登录帐号。因为域通讯录只做查询操作，所以登录帐号并不一定是管理员帐号，普通域帐号即可。
# 本 bot 用了 simple 验证方法，无需传递一个完整的 DN，只需要一个类似 '域帐号@DOMAIN.TLD' 的帐号就可以。
# 在 Windows 2000 的 Active Directory 中，甚至只需要域帐号就可以了，连 @DOMAIN.TLD 都不需要。
bot.active-directory-address-book.域通讯簿名称1.ldap.bind.user-name=Administrator@DOMAIN.TLD

# 登录帐号的密码
bot.active-directory-address-book.域通讯簿名称1.ldap.bind.user-password=

# 搜索的根节点 / 根唯一识别名。搜索根节点可以有多个，每个根节点单独起一行来写，看起来会清晰些
# 你需要有一定的 LDAP 知识才能知道如何写 DN 名称
bot.active-directory-address-book.域通讯簿名称1.ldap.search.base-dn=
bot.active-directory-address-book.域通讯簿名称1.ldap.search.base-dn=
bot.active-directory-address-book.域通讯簿名称1.ldap.search.base-dn=

# 搜索过滤器
# 你需要有一定的 LDAP 知识才能知道如何写 LDAP 过滤器表达式
bot.active-directory-address-book.域通讯簿名称1.ldap.search.filter=
# 搜索排序控制： 排序所采用的属性名
bot.active-directory-address-book.域通讯簿名称1.ldap.search.control.sort.attribute-names=revision
bot.active-directory-address-book.域通讯簿名称1.ldap.search.control.sort.attribute-names=whenCreated
bot.active-directory-address-book.域通讯簿名称1.max-fetched-entries=2

#### 域通讯簿名称2 ####
bot.active-directory-address-book.域通讯簿名称2.ldap.scheme=ldaps
bot.active-directory-address-book.域通讯簿名称2.ldap.server.address=localhost
bot.active-directory-address-book.域通讯簿名称2.ldap.server.port=3269
bot.active-directory-address-book.域通讯簿名称2.ldap.bind.user-name=Administrator@DOMAIN.TLD
bot.active-directory-address-book.域通讯簿名称2.ldap.bind.user-password=
bot.active-directory-address-book.域通讯簿名称2.ldap.search.base-dn=
bot.active-directory-address-book.域通讯簿名称2.ldap.search.base-dn=
bot.active-directory-address-book.域通讯簿名称2.ldap.search.base-dn=
bot.active-directory-address-book.域通讯簿名称2.ldap.search.filter=
bot.active-directory-address-book.域通讯簿名称2.ldap.search.control.sort.attribute-names=revision
bot.active-directory-address-book.域通讯簿名称2.ldap.search.control.sort.attribute-names=whenCreated
bot.active-directory-address-book.域通讯簿名称2.max-fetched-entries=2

#-------------------------------------------------------------------------------
# Shell Command / 执行系统命令
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_ShellCommand.name=命令行

bot.command-line.commands=cmd

# 是不是只允许自己使用。
# 建议只允许自己使用，否则会有安全隐患
bot.command-line.permission.only-me=yes

# 用什么 shell 执行
# 注意，shell 命令必须支持 -c 'command' 参数，已知的支持 -c '命令' 参数的 shell 有
# bash、zsh、fish，也许还有其他的，我不知道……
bot.command-line.shell=bash

# 命令返回的最大行数默认值
# - 如果为 0 表示不限制最大行数（注意）
# - 在执行命令时，可以用 .行数 选项来改变该数值。例如： 'cmd.10 ls /bin' 就把 ls /bin 的输出行数限定为前 10 行
bot.command-line.max-response-lines=5

# 进程运行超时时间，单位：秒
bot.command-line.process.timeout.default=5


#-------------------------------------------------------------------------------
# Emoji Test / 发送 Emoji 字符
# 除了像 [捂脸] 这类的，还有 2000 多个 emoji 字符可以发！
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_Emoji.name=emoji表情字符

bot.emoji-test.commands=emoji

#
#bot.emoji-test.jdbc.database-table.prefix=


#-------------------------------------------------------------------------------
# 加好友机器人（别人在群里用 /addme 命令让本 Bot -- 自己的微信 添加别人为好友）、自动通过别人发来的加好友请求
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_MakeFriend.name=加好友

bot.make-friend.commands=addme

#bot.make-friend.auto-accepts=接头暗号/自动通过后，发出的消息，如果留空，则不发
# 接头暗号可以按照一下格式书写：
#
# *关键字*	： 暗号包含该关键字
# 关键字	： 暗号必须等于该关键字，多一个字、少一个字都不行
# 关键字*	： 暗号必须以该关键字开头
# *关键字	： 暗号必须以该关键字结尾
#
# 自动发出的消息，可以按照 java 转义的方式书写：就是说，如果要发多行消息，用 "\n" 表示换行即可。

#
# 示例：
#bot.make-friend.auto-accepts=*租房*/欢迎看房
#bot.make-friend.auto-accepts=*吉他*/吉他品牌: XXX\n吉他尺寸: 41 英吋\n吉他类型: 民谣\n吉他颜色: 黄色面板、深棕色后面板


#-------------------------------------------------------------------------------
# 讯飞云 语音识别/语音转文字
# 注意：本 bot 用的是讯飞云的“语音听写”接口，该接口是免费的，但限制语音时长只不能超过 1 分钟
#-------------------------------------------------------------------------------
bot.net_maclife_wechat_http_Bot_XunFeiYun.name=讯飞云

# 讯飞云 APP 的 ID
bot.xfyun.app.id=
# 讯飞云 APP 的 Key
bot.xfyun.app.key=
